generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role {
  user
  seller
  warehouse_manager
  admin
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Store     Store[]
  Order     Order[]
  Cart      Cart[]
  Like      Like[]
  Rating    Rating[]

  @@map("user")
}

model Store {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  sellerId    String    @db.Uuid
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  product     Product[]

  @@map("store")
}

model Category {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  parentCategoryId String?    @db.Uuid
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  parentCategory   Category?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  subCategories    Category[] @relation("CategoryHierarchy")
  Product          Product[]

  @@map("category")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  TODO
  IN_PROGRESS
  COMPLETED
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  storeId     String   @db.Uuid
  categoryId  String?  @db.Uuid
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store     Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category  Category?   @relation(fields: [categoryId], references: [id])
  OrderItem OrderItem[]
  Cart      Cart[]
  Like      Like[]
  Rating    Rating[]
  Warehouse Warehouse[]

  @@map("product")
}

enum status {
  pending
  shipped
  delivered
  cancelled
}

model Order {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId      String   @db.Uuid
  totalAmount Float    @default(0)
  status      status   @default(pending)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem OrderItem[]
}

model OrderItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String   @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Like {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Rating {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  rating    Int
  review    String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Banner {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imageUrl    String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Warehouse {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
}
